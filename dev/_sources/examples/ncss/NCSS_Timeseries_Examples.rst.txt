
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/ncss/NCSS_Timeseries_Examples.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_ncss_NCSS_Timeseries_Examples.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_ncss_NCSS_Timeseries_Examples.py:


================
NCSS Time Series
================

Use Siphon to query the NetCDF Subset Service for a timeseries.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: Python

    from datetime import datetime, timedelta, UTC

    import matplotlib.pyplot as plt
    from netCDF4 import num2date

    from siphon.catalog import TDSCatalog








.. GENERATED FROM PYTHON SOURCE LINES 19-22

First we construct a TDSCatalog instance pointing to our dataset of interest, in
this case TDS' "Best" virtual dataset for the GFS global 0.5 degree collection of
GRIB files. We see this catalog contains a single dataset.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: Python

    best_gfs = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/'
                          'Global_0p5deg/catalog.xml?dataset=grib/NCEP/GFS/Global_0p5deg/Best')
    print(best_gfs.datasets)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['Best GFS Half Degree Forecast Time Series']




.. GENERATED FROM PYTHON SOURCE LINES 27-28

We pull out this dataset and get the NCSS access point

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: Python

    best_ds = best_gfs.datasets[0]
    ncss = best_ds.subset()








.. GENERATED FROM PYTHON SOURCE LINES 32-34

We can then use the `ncss` object to create a new query object, which
facilitates asking for data from the server.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: Python

    query = ncss.query()








.. GENERATED FROM PYTHON SOURCE LINES 37-42

We construct a query asking for data corresponding to latitude 40N and longitude 105W,
for the next 7 days. We also ask for NetCDF version 4 data, for the variable
'Temperature_isobaric', at the vertical level of 100000 Pa (approximately surface).
This request will return all times in the range for a single point. Note the string
representation of the query is a properly encoded query string.

.. GENERATED FROM PYTHON SOURCE LINES 42-46

.. code-block:: Python

    now = datetime.now(UTC)
    query.lonlat_point(-105, 40).vertical_level(100000).time_range(now, now + timedelta(days=7))
    query.variables('Temperature_isobaric').accept('netcdf')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    var=Temperature_isobaric&time_start=2025-10-31T16%3A25%3A05.844605%2B00%3A00&time_end=2025-11-07T16%3A25%3A05.844605%2B00%3A00&longitude=-105&latitude=40&vertCoord=100000&accept=netcdf



.. GENERATED FROM PYTHON SOURCE LINES 47-50

We now request data from the server using this query. The `NCSS` class handles parsing
this NetCDF data (using the ``netCDF4`` module). If we print out the variable names, we
see our requested variables, as well as a few others (more metadata information)

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    data = ncss.get_data(query)
    list(data.variables)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['latitude', 'longitude', 'stationAltitude', 'station_id', 'station_description', 'Temperature_isobaric', 'time', 'stationIndex']



.. GENERATED FROM PYTHON SOURCE LINES 54-55

We'll pull out the temperature  and time variables.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python

    temp = data.variables['Temperature_isobaric']
    time = data.variables['time']








.. GENERATED FROM PYTHON SOURCE LINES 59-63

The time values are in hours relative to the start of the entire model collection.
Fortunately, the ``netCDF4`` module has a helper function to convert these numbers into
Python `datetime` objects. We can see the first 5 element output by the function look
reasonable.

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: Python

    time_vals = num2date(time[:].squeeze(), time.units, only_use_cftime_datetimes=False)
    print(time_vals[:5])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [real_datetime(2025, 10, 31, 15, 0) real_datetime(2025, 10, 31, 18, 0)
     real_datetime(2025, 10, 31, 21, 0) real_datetime(2025, 11, 1, 0, 0)
     real_datetime(2025, 11, 1, 3, 0)]




.. GENERATED FROM PYTHON SOURCE LINES 67-69

Now we can plot these up using matplotlib, which has ready-made support for `datetime`
objects.

.. GENERATED FROM PYTHON SOURCE LINES 69-74

.. code-block:: Python

    fig, ax = plt.subplots(1, 1, figsize=(9, 8))
    ax.plot(time_vals, temp[:].squeeze(), 'r', linewidth=2)
    ax.set_ylabel(f'Temperature ({temp.units})')
    ax.set_xlabel('Forecast Time (UTC)')
    ax.grid(True)



.. image-sg:: /examples/ncss/images/sphx_glr_NCSS_Timeseries_Examples_001.png
   :alt: NCSS Timeseries Examples
   :srcset: /examples/ncss/images/sphx_glr_NCSS_Timeseries_Examples_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.233 seconds)


.. _sphx_glr_download_examples_ncss_NCSS_Timeseries_Examples.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: NCSS_Timeseries_Examples.ipynb <NCSS_Timeseries_Examples.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: NCSS_Timeseries_Examples.py <NCSS_Timeseries_Examples.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: NCSS_Timeseries_Examples.zip <NCSS_Timeseries_Examples.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
